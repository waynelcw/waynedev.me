{"version":3,"sources":["../../src/services/run-mutation-batch.ts"],"names":["callRealApi","event","store","type","payload","actions","dispatch","runMutationBatch","runningBatch","Promise","all","map"],"mappings":";;;;;AAIA;;AACA;;AAEA,MAAMA,WAAW,GAAG,CAClBC,KADkB,EAElBC,KAFkB,KAGT;AACT,gCAAYA,KAAZ;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBH,KAA1B;;AACA,MAAIE,IAAI,IAAIE,gBAAZ,EAAqB;AACnBH,IAAAA,KAAK,CAACI,QAAN,CAAeD,iBAAQF,IAAR,EAAc,GAAGC,OAAjB,CAAf;AACD;AACF,CATD,C,CAWA;;;AACO,MAAMG,gBAAgB,GAAG,OAAO;AACrCC,EAAAA,YAAY,GAAG,EADsB;AAErCN,EAAAA;AAFqC,CAAP,KAI9BO,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,GAAb,CAAiBP,OAAO,IAAIJ,WAAW,CAACI,OAAD,EAAUF,KAAV,CAAvC,CAAZ,CAJK","sourcesContent":["import { IMutationAction } from \"../state-machines/data-layer/types\"\nimport { Store, AnyAction } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IWaitingContext } from \"../state-machines/waiting/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport { actions } from \"../redux/actions\"\n\nconst callRealApi = (\n  event: IMutationAction,\n  store?: Store<IGatsbyState, AnyAction>\n): void => {\n  assertStore(store)\n  const { type, payload } = event\n  if (type in actions) {\n    store.dispatch(actions[type](...payload))\n  }\n}\n\n// Consume the entire batch and run actions\nexport const runMutationBatch = async ({\n  runningBatch = [],\n  store,\n}: Partial<IWaitingContext>): Promise<void[]> =>\n  Promise.all(runningBatch.map(payload => callRealApi(payload, store)))\n"],"file":"run-mutation-batch.js"}