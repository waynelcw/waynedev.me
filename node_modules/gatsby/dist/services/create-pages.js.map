{"version":3,"sources":["../../src/services/create-pages.ts"],"names":["createPages","parentSpan","gatsbyNodeGraphQLFunction","store","activity","reporter","activityTimer","start","timestamp","Date","now","currentPages","Map","getState","pages","graphql","traceId","waitForCascadingActions","span","verbose","nodes","size","nodesByType","get","end","deletedPages","length","tim","changedPages"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AAEO,eAAeA,WAAf,CAA2B;AAChCC,EAAAA,UADgC;AAEhCC,EAAAA,yBAFgC;AAGhCC,EAAAA;AAHgC,CAA3B,EAOJ;AAAA;;AACD,gCAAYA,KAAZ;;AACA,QAAMC,QAAQ,GAAGC,kBAASC,aAAT,CAAwB,aAAxB,EAAsC;AACrDL,IAAAA;AADqD,GAAtC,CAAjB;;AAGAG,EAAAA,QAAQ,CAACG,KAAT;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACA,QAAMC,YAAY,GAAG,IAAIC,GAAJ,CAA6BT,KAAK,CAACU,QAAN,GAAiBC,KAA9C,CAArB;AAEA,QAAM,4BACH,aADG,EAEJ;AACEC,IAAAA,OAAO,EAAEb,yBADX;AAEEc,IAAAA,OAAO,EAAG,qBAFZ;AAGEC,IAAAA,uBAAuB,EAAE,IAH3B;AAIEhB,IAAAA,UAAU,EAAEG,QAAQ,CAACc;AAJvB,GAFI,EAQJ;AAAEd,IAAAA;AAAF,GARI,CAAN;;AAUAC,oBAASc,OAAT,CACG,YAAWhB,KAAK,CAACU,QAAN,GAAiBO,KAAjB,CAAuBC,IAAK,eACtClB,KAAK,CAACU,QAAN,GAAiBS,WAAjB,CAA6BD,IAC9B,eAFD,yBAGElB,KAAK,CAACU,QAAN,GAAiBS,WAHnB,oFAGE,sBAA8BC,GAA9B,CAAmC,UAAnC,CAHF,2DAGE,uBAA+CF,IAChD,iBALH;;AAOAjB,EAAAA,QAAQ,CAACoB,GAAT;;AAEAnB,oBAASc,OAAT,CAAkB,4BAAlB;;AAEA,QAAMM,YAAY,GAAG,wCAAqBtB,KAAK,CAACU,QAAN,GAAiBC,KAAtC,EAA6CN,SAA7C,CAArB;;AAEAH,oBAASc,OAAT,CACG,WAAUM,YAAY,CAACC,MAAO,QAAOD,YAAY,CAACC,MAAb,KAAwB,CAAxB,GAA6B,EAA7B,GAAkC,GAAG,EAD7E;;AAIA,QAAMC,GAAG,GAAGtB,kBAASC,aAAT,CAAwB,4BAAxB,CAAZ;;AACAqB,EAAAA,GAAG,CAACpB,KAAJ;AAEA,QAAM;AAAEqB,IAAAA;AAAF,MAAmB,oCACvBjB,YADuB,EAEvBR,KAAK,CAACU,QAAN,GAAiBC,KAFM,CAAzB;;AAKAT,oBAASc,OAAT,CACG,SAAQS,YAAY,CAACF,MAAO,gBAC3BE,YAAY,CAACF,MAAb,KAAwB,CAAxB,GAA6B,EAA7B,GAAkC,GACnC,EAHH;;AAKAC,EAAAA,GAAG,CAACH,GAAJ;AAEA,SAAO;AACLI,IAAAA,YADK;AAELH,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { IDataLayerContext } from \"../state-machines/data-layer/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport { IGatsbyPage } from \"../redux/types\"\nimport { deleteUntouchedPages, findChangedPages } from \"../utils/changed-pages\"\n\nexport async function createPages({\n  parentSpan,\n  gatsbyNodeGraphQLFunction,\n  store,\n}: Partial<IDataLayerContext>): Promise<{\n  deletedPages: string[]\n  changedPages: string[]\n}> {\n  assertStore(store)\n  const activity = reporter.activityTimer(`createPages`, {\n    parentSpan,\n  })\n  activity.start()\n  const timestamp = Date.now()\n  const currentPages = new Map<string, IGatsbyPage>(store.getState().pages)\n\n  await apiRunnerNode(\n    `createPages`,\n    {\n      graphql: gatsbyNodeGraphQLFunction,\n      traceId: `initial-createPages`,\n      waitForCascadingActions: true,\n      parentSpan: activity.span,\n    },\n    { activity }\n  )\n  reporter.verbose(\n    `Now have ${store.getState().nodes.size} nodes with ${\n      store.getState().nodesByType.size\n    } types, and ${\n      store.getState().nodesByType?.get(`SitePage`)?.size\n    } SitePage nodes`\n  )\n  activity.end()\n\n  reporter.verbose(`Checking for deleted pages`)\n\n  const deletedPages = deleteUntouchedPages(store.getState().pages, timestamp)\n\n  reporter.verbose(\n    `Deleted ${deletedPages.length} page${deletedPages.length === 1 ? `` : `s`}`\n  )\n\n  const tim = reporter.activityTimer(`Checking for changed pages`)\n  tim.start()\n\n  const { changedPages } = findChangedPages(\n    currentPages,\n    store.getState().pages\n  )\n\n  reporter.verbose(\n    `Found ${changedPages.length} changed page${\n      changedPages.length === 1 ? `` : `s`\n    }`\n  )\n  tim.end()\n\n  return {\n    changedPages,\n    deletedPages,\n  }\n}\n"],"file":"create-pages.js"}